// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

{{ if and .implementString .options -}}
import "fmt"
{{ end }}

{{ if .imports -}}
import (
{{- range .imports }}
    {{ if .Alias }}  {{ .Alias }} "{{ .Path }}"{{ else }}  "{{ .Path }}"{{ end -}}
{{ end }}
)
{{ end }}

{{ if and .implementEqual .options -}}
import "github.com/google/go-cmp/cmp"
{{ end }}

{{ $applyOptionFuncType := or $.applyOptionFuncType (ToPublic $.optionTypeName) }}

{{ $applyFuncName := or $.applyFuncName (printf "apply%sOptions" (ToPublic $.configTypeName)) }}

type {{ $applyOptionFuncType }} func(c *{{ $.configTypeName }}) {{ if $.returnError -}} error {{ end }}

{{ if $.createNewFunc}}
func new{{ $.configTypeName | ToPublic}}(options ...{{ $.optionTypeName }}) {{ if $.returnError -}} ({{ $.configTypeName }} , error) {{else}} {{ $.configTypeName }} {{ end }} {
    var c {{ $.configTypeName }}
    {{ if $.returnError -}}
    err := {{ $applyFuncName }}(&c, options...)
    return c, err
    {{- else -}}
    {{ $applyFuncName }}(&c, options...)
    return c
    {{- end }}
}
{{ end }}

func {{ $applyFuncName }}(c *{{ $.configTypeName }}, options ...{{ $.optionTypeName }}) {{ if $.returnError -}} error {{ end }} {
{{- range .options -}}{{ $optionName := .Name }}{{ if .DefaultValue }}
    c.{{ .Name }} = {{ .DefaultValue }}
{{- end }}{{ if .IsStruct }}{{ range .Fields }}{{ if .DefaultValue }}
    c.{{ $optionName }}.{{ .Name }} = {{ .DefaultValue }}
{{- end }}{{ end }}
{{- end }}{{ end }}
{{ if $.returnError -}}
    for _, o := range options {
        if err := o(c); err != nil {
            return err
            }
    }
    return nil
{{- else -}}
    for _, o := range options {
        o(c)
    }
{{- end }}
}

{{ range .options }}{{ $option := . }}

{{ $name := .PublicName | ToPublic | printf "%s%s" $.optionPrefix }}
{{ if $.optionSuffix }}{{ $name = $.optionSuffix | printf "%s%s" (.PublicName | ToPublic) }}{{ end }}

{{ if .Docs }}
{{- range $i, $doc := .Docs }}// {{ if eq $i 0 }}{{ $name }} {{ end }}{{ $doc }}{{ end -}}
{{ end -}}
func {{ $name }}(
{{- range $i, $f := .Fields }}{{ if ne $i 0 }},{{ end }}{{ $f.ParamName }} {{ $f.ParamType }}{{ end -}}
) {{ $applyOptionFuncType }} {
    return func(c *{{ $.configTypeName }}) {{ if $.returnError -}} error {{ end }} {
{{- if and $option.IsStruct $option.DefaultIsNil }}
        c.{{ $option.Name }} = new({{ $option.Type }})
{{- end }}
{{- range .Fields }}{{ if $option.IsStruct }}
        c.{{ $option.Name }}.{{ .Name }} = {{ .ParamName }}
{{- else }}
        c.{{ $option.Name }} = {{ if $option.DefaultIsNil }}&{{ end }}{{ .ParamName }}
{{- end }}{{- end }}
{{ if $.returnError -}}
        return nil
{{- end }}
    }
}
{{ end }}
