package test

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import (
	"net/url"
	"time"
	time2 "time"
)

type ApplyOptionFunc func(c *config) error

func (f ApplyOptionFunc) apply(c *config) error {
	return f(c)
}

func newConfig(options ...Option) (config, error) {
	var c config
	err := applyConfigOptions(&c, options...)
	return c, err
}

func applyConfigOptions(c *config, options ...Option) error {
	c.myIntWithDefault = 1
	c.myFloatWithDefault = 1.23
	c.myStringWithDefault = `default string`
	c.myStructWithDefault.a = 1
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type Option interface {
	apply(*config) error
}

func OptionMyInt(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myInt = o
		return nil
	}
}

func OptionMyIntWithDefault(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myIntWithDefault = o
		return nil
	}
}

func OptionYourInt(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myRenamedInt = o
		return nil
	}
}

// OptionMyDocumentedInt does something
func OptionMyDocumentedInt(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myDocumentedInt = o
		return nil
	}
}

// OptionMyCommentedInt for some reason
func OptionMyCommentedInt(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myCommentedInt = o
		return nil
	}
}

// OptionMyDocAndCommentInt does something else
// for some other reason
func OptionMyDocAndCommentInt(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myDocAndCommentInt = o
		return nil
	}
}

// OptionMyFloat takes a float
// really a float
func OptionMyFloat(o float64) ApplyOptionFunc {
	return func(c *config) error {
		c.myFloat = o
		return nil
	}
}

func OptionMyFloatWithDefault(o float64) ApplyOptionFunc {
	return func(c *config) error {
		c.myFloatWithDefault = o
		return nil
	}
}

func OptionMyString(o string) ApplyOptionFunc {
	return func(c *config) error {
		c.myString = o
		return nil
	}
}

func OptionMyStringWithDefault(o string) ApplyOptionFunc {
	return func(c *config) error {
		c.myStringWithDefault = o
		return nil
	}
}

func OptionMyFunc(o func() int) ApplyOptionFunc {
	return func(c *config) error {
		c.myFunc = o
		return nil
	}
}

func OptionMyIntPointer(o *int) ApplyOptionFunc {
	return func(c *config) error {
		c.myIntPointer = o
		return nil
	}
}

func OptionMyInterface(o interface{}) ApplyOptionFunc {
	return func(c *config) error {
		c.myInterface = o
		return nil
	}
}

// OptionMyURL types requiring imports
func OptionMyURL(o url.URL) ApplyOptionFunc {
	return func(c *config) error {
		c.myURL = o
		return nil
	}
}

func OptionMyDuration(o time.Duration) ApplyOptionFunc {
	return func(c *config) error {
		c.myDuration = o
		return nil
	}
}

func OptionMyDuration2(o time2.Duration) ApplyOptionFunc {
	return func(c *config) error {
		c.myDuration2 = o
		return nil
	}
}

func OptionMyStruct(a int, b int) ApplyOptionFunc {
	return func(c *config) error {
		c.myStruct.a = a
		c.myStruct.b = b
		return nil
	}
}

func OptionMyStructWithDefault(a int) ApplyOptionFunc {
	return func(c *config) error {
		c.myStructWithDefault.a = a
		return nil
	}
}

func OptionMyPointerToStruct(a int, b int) ApplyOptionFunc {
	return func(c *config) error {
		c.myPointerToStruct = new(struct{ a, b int })
		c.myPointerToStruct.a = a
		c.myPointerToStruct.b = b
		return nil
	}
}

func OptionMyStructWithVariadicSlice(a int, b ...int) ApplyOptionFunc {
	return func(c *config) error {
		c.myStructWithVariadicSlice.a = a
		c.myStructWithVariadicSlice.b = b
		return nil
	}
}

func OptionMySlice(o ...int) ApplyOptionFunc {
	return func(c *config) error {
		c.mySlice = o
		return nil
	}
}

func OptionMyPointerToSlice(o ...int) ApplyOptionFunc {
	return func(c *config) error {
		c.myPointerToSlice = &o
		return nil
	}
}

func OptionYourSlice(o ...int) ApplyOptionFunc {
	return func(c *config) error {
		c.myRenamedSlice = o
		return nil
	}
}

func OptionMyPointerToInt(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myPointerToInt = &o
		return nil
	}
}

func OptionYourIntWithPointer(o int) ApplyOptionFunc {
	return func(c *config) error {
		c.myPointerToRenamedInt = &o
		return nil
	}
}
