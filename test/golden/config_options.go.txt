package test

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import (
	"net/url"
	"time"
	time2 "time"
)

const defaultConfigMyIntWithDefault int = 1
const defaultConfigMyRenamedIntWithDefault int = 1
const defaultConfigMyFloatWithDefault float64 = 1.23
const defaultConfigMyStringWithDefault string = `default string`

type applyOptionFunc func(c *config) error

func (f applyOptionFunc) apply(c *config) error {
	return f(c)
}

func newConfig(options ...Option) (config, error) {
	var c config
	err := applyConfigOptions(&c, options...)
	return c, err
}

func applyConfigOptions(c *config, options ...Option) error {
	c.myIntWithDefault = defaultConfigMyIntWithDefault
	c.myRenamedIntWithDefault = defaultConfigMyRenamedIntWithDefault
	c.myFloatWithDefault = defaultConfigMyFloatWithDefault
	c.myStringWithDefault = defaultConfigMyStringWithDefault
	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type Option interface {
	apply(*config) error
}

// OptionMyInt takes an integer
func OptionMyInt(o int) applyOptionFunc {
	return func(c *config) error {
		c.myInt = (int)(o)
		return nil
	}
}

// OptionMyIntWithDefault has documentation
func OptionMyIntWithDefault(o int) applyOptionFunc {
	return func(c *config) error {
		c.myIntWithDefault = (int)(o)
		return nil
	}
}

// OptionYourInt does something
func OptionYourInt(o int) applyOptionFunc {
	return func(c *config) error {
		c.myRenamedInt = (int)(o)
		return nil
	}
}

func OptionYourIntWithDefault(o int) applyOptionFunc {
	return func(c *config) error {
		c.myRenamedIntWithDefault = (int)(o)
		return nil
	}
}

// OptionMyFloat takes a float
// really a float
func OptionMyFloat(o float64) applyOptionFunc {
	return func(c *config) error {
		c.myFloat = (float64)(o)
		return nil
	}
}

func OptionMyFloatWithDefault(o float64) applyOptionFunc {
	return func(c *config) error {
		c.myFloatWithDefault = (float64)(o)
		return nil
	}
}

func OptionMyString(o string) applyOptionFunc {
	return func(c *config) error {
		c.myString = (string)(o)
		return nil
	}
}

func OptionMyStringWithDefault(o string) applyOptionFunc {
	return func(c *config) error {
		c.myStringWithDefault = (string)(o)
		return nil
	}
}

func OptionMyFunc(o func() int) applyOptionFunc {
	return func(c *config) error {
		c.myFunc = (func() int)(o)
		return nil
	}
}

func OptionMyIntPointer(o *int) applyOptionFunc {
	return func(c *config) error {
		c.myIntPointer = (*int)(o)
		return nil
	}
}

func OptionMyInterface(o interface{}) applyOptionFunc {
	return func(c *config) error {
		c.myInterface = (interface{})(o)
		return nil
	}
}

// OptionMyURL types requiring imports
func OptionMyURL(o url.URL) applyOptionFunc {
	return func(c *config) error {
		c.myURL = (url.URL)(o)
		return nil
	}
}

func OptionMyDuration(o time.Duration) applyOptionFunc {
	return func(c *config) error {
		c.myDuration = (time.Duration)(o)
		return nil
	}
}

func OptionMyDuration2(o time2.Duration) applyOptionFunc {
	return func(c *config) error {
		c.myDuration2 = (time2.Duration)(o)
		return nil
	}
}
