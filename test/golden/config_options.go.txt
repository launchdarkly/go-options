package test

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import (
	"net/url"
	"time"
	time2 "time"
)

const defaultConfigMyIntWithDefault = 1
const defaultConfigMyRenamedIntWithDefault = 1
const defaultConfigMyFloatWithDefault = 1.23
const defaultConfigMyStringWithDefault = `default string`

type applyOptionFunc func(c *config) error

func (f applyOptionFunc) apply(c *config) error {
	return f(c)
}

func newConfig(options ...Option) (config, error) {
	var c config
	err := applyConfigOptions(&c, options...)
	return c, err
}

func applyConfigOptions(c *config, options ...Option) error {

	c.myIntWithDefault = defaultConfigMyIntWithDefault

	c.myRenamedIntWithDefault = defaultConfigMyRenamedIntWithDefault

	c.myFloatWithDefault = defaultConfigMyFloatWithDefault

	c.myStringWithDefault = defaultConfigMyStringWithDefault

	for _, o := range options {
		if err := o.apply(c); err != nil {
			return err
		}
	}
	return nil
}

type Option interface {
	apply(*config) error
}

// OptionMyInt takes an integer
func OptionMyInt(o int) applyOptionFunc {
	return func(c *config) error {
		c.myInt = o
		return nil
	}
}

// OptionMyIntWithDefault has documentation
func OptionMyIntWithDefault(o int) applyOptionFunc {
	return func(c *config) error {
		c.myIntWithDefault = o
		return nil
	}
}

// OptionYourInt does something
func OptionYourInt(o int) applyOptionFunc {
	return func(c *config) error {
		c.myRenamedInt = o
		return nil
	}
}

func OptionYourIntWithDefault(o int) applyOptionFunc {
	return func(c *config) error {
		c.myRenamedIntWithDefault = o
		return nil
	}
}

// OptionMyFloat takes a float
// really a float
func OptionMyFloat(o float64) applyOptionFunc {
	return func(c *config) error {
		c.myFloat = o
		return nil
	}
}

func OptionMyFloatWithDefault(o float64) applyOptionFunc {
	return func(c *config) error {
		c.myFloatWithDefault = o
		return nil
	}
}

func OptionMyString(o string) applyOptionFunc {
	return func(c *config) error {
		c.myString = o
		return nil
	}
}

func OptionMyStringWithDefault(o string) applyOptionFunc {
	return func(c *config) error {
		c.myStringWithDefault = o
		return nil
	}
}

func OptionMyFunc(o func() int) applyOptionFunc {
	return func(c *config) error {
		c.myFunc = o
		return nil
	}
}

func OptionMyIntPointer(o *int) applyOptionFunc {
	return func(c *config) error {
		c.myIntPointer = o
		return nil
	}
}

func OptionMyInterface(o interface{}) applyOptionFunc {
	return func(c *config) error {
		c.myInterface = o
		return nil
	}
}

// OptionMyURL types requiring imports
func OptionMyURL(o url.URL) applyOptionFunc {
	return func(c *config) error {
		c.myURL = o
		return nil
	}
}

func OptionMyDuration(o time.Duration) applyOptionFunc {
	return func(c *config) error {
		c.myDuration = o
		return nil
	}
}

func OptionMyDuration2(o time2.Duration) applyOptionFunc {
	return func(c *config) error {
		c.myDuration2 = o
		return nil
	}
}

func OptionMyStruct(a int, b int) applyOptionFunc {
	return func(c *config) error {
		c.myStruct.a = a
		c.myStruct.b = b
		return nil
	}
}

func OptionMyStructWithDefault(a int) applyOptionFunc {
	return func(c *config) error {
		c.myStructWithDefault.a = a
		return nil
	}
}

func OptionMyOptionalStruct(a int, b int) applyOptionFunc {
	return func(c *config) error {
		c.myOptionalStruct = new(struct{ a, b int })
		c.myOptionalStruct.a = a
		c.myOptionalStruct.b = b
		return nil
	}
}

func OptionMyStructWithSlice(a []int) applyOptionFunc {
	return func(c *config) error {
		c.myStructWithSlice.a = a
		return nil
	}
}

func OptionMyStructWithVariadicSlice(a int, b ...string) applyOptionFunc {
	return func(c *config) error {
		c.myStructWithVariadicSlice.a = a
		c.myStructWithVariadicSlice.b = b
		return nil
	}
}

func OptionMySlice(o ...int) applyOptionFunc {
	return func(c *config) error {
		c.mySlice = o
		return nil
	}
}

func OptionMyOptionalSlice(o ...int) applyOptionFunc {
	return func(c *config) error {
		c.myOptionalSlice = &o
		return nil
	}
}

func OptionYourSlice(o ...int) applyOptionFunc {
	return func(c *config) error {
		c.myRenamedSlice = o
		return nil
	}
}
