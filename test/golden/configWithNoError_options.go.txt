package test

// Code generated by github.com/launchdarkly/go-options.  DO NOT EDIT.

import "fmt"

import "github.com/google/go-cmp/cmp"

type ApplyNoErrorOptionFunc func(c *configWithNoError)

func (f ApplyNoErrorOptionFunc) apply(c *configWithNoError) {
	f(c)
}

func newConfigWithNoError(options ...NoErrorOption) configWithNoError {
	var c configWithNoError
	applyConfigWithNoErrorOptions(&c, options...)
	return c
}

func applyConfigWithNoErrorOptions(c *configWithNoError, options ...NoErrorOption) {
	for _, o := range options {
		o.apply(c)
	}
}

type NoErrorOption interface {
	apply(*configWithNoError)
}

type noErrorOptionMyIntImpl struct {
	o int
}

func (o noErrorOptionMyIntImpl) apply(c *configWithNoError) {
	c.myInt = o.o

}

func (o noErrorOptionMyIntImpl) Equal(v noErrorOptionMyIntImpl) bool {
	switch {
	case !cmp.Equal(o.o, v.o):
		return false
	}
	return true
}

func (o noErrorOptionMyIntImpl) String() string {
	name := "NoErrorOptionMyInt"

	// hack to avoid go vet error about passing a function to Sprintf
	var value interface{} = o.o
	return fmt.Sprintf("%s: %+v", name, value)
}

func NoErrorOptionMyInt(o int) NoErrorOption {
	return noErrorOptionMyIntImpl{
		o: o,
	}
}
